<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java面向对象知识点</title>
    <url>/2019/10/11/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>[TOC]</p><h2 id="第二章-类和对象"><a href="#第二章-类和对象" class="headerlink" title="第二章 类和对象"></a>第二章 类和对象</h2><hr><h3 id="1-面向对象概念"><a href="#1-面向对象概念" class="headerlink" title="1.面向对象概念"></a>1.面向对象概念</h3><h3 id="2-类的创建"><a href="#2-类的创建" class="headerlink" title="2.类的创建"></a>2.类的创建</h3><p>语法：public class 类名{}<br>File—&gt;new—&gt;class—&gt;类名</p><h3 id="3-创建对象"><a href="#3-创建对象" class="headerlink" title="3.创建对象"></a>3.创建对象</h3><p>类名 对象名=new 类名();</p><p>对象名.方法名(); 对象名.属性 </p><h3 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h3><p>​    方法名和类名相同,没有返回值  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">	public 类名()&#123;&#125;//主要的做用是初始化操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>









<h3 id="5-构造方法重载"><a href="#5-构造方法重载" class="headerlink" title="5.构造方法重载"></a>5.构造方法重载</h3><p>在同一个类中，方法名相同，参数个数，顺序，类型不相同的构造方法    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">	public 类名()&#123;&#125;</span><br><span class="line">	public 类名(String name,int age)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-构造方法的执行"><a href="#6-构造方法的执行" class="headerlink" title="6.构造方法的执行"></a>6.构造方法的执行</h3><p>new 类名();—&gt;执行构造方法<br>super();—&gt;执行了父类的构造方法</p>
<h3 id="7-static静态修饰符"><a href="#7-static静态修饰符" class="headerlink" title="7.static静态修饰符"></a>7.static静态修饰符</h3><p> 静态修饰符可以修饰属性，方法，代码块<br>类名.属性      类名.方法名</p>
<h3 id="8-java内存（栈和堆，static，方法区，gc（垃圾回收机制））"><a href="#8-java内存（栈和堆，static，方法区，gc（垃圾回收机制））" class="headerlink" title="8.java内存（栈和堆，static，方法区，gc（垃圾回收机制））"></a>8.java内存（栈和堆，static，方法区，gc（垃圾回收机制））</h3><h2 id="第三章-面向对象三大特征—封装"><a href="#第三章-面向对象三大特征—封装" class="headerlink" title="第三章 面向对象三大特征—封装"></a>第三章 面向对象三大特征—封装</h2><hr>
<h3 id="1-封装的概念"><a href="#1-封装的概念" class="headerlink" title="1.封装的概念"></a>1.封装的概念</h3><h3 id="2-封装的步骤"><a href="#2-封装的步骤" class="headerlink" title="2.封装的步骤"></a>2.封装的步骤</h3><p>1.把属性私有化（private）<br>2.对这些属性设置get和set方法<br>3.调用处理这些方法</p>
<h3 id="3-封装的作用"><a href="#3-封装的作用" class="headerlink" title="3.封装的作用"></a>3.封装的作用</h3><p>避免一些用一些不合乎常理的操作</p>
<h3 id="4-修饰符"><a href="#4-修饰符" class="headerlink" title="4.修饰符"></a>4.修饰符</h3><p>public—&gt;公共的：在一个项目中都可以访问，权限最高<br>private—&gt;私有的：只能在本类中进行访问，权限最低<br>protected—&gt;安全的，受保护的：同一个包能进行访问，继承中之类可以访问父类<br>default—&gt;默认的：同一个包能访问</p>
<h2 id="第四章-面向对象三大特征—继承"><a href="#第四章-面向对象三大特征—继承" class="headerlink" title="第四章 面向对象三大特征—继承"></a>第四章 面向对象三大特征—继承</h2><hr>
<h3 id="1-继承的概念"><a href="#1-继承的概念" class="headerlink" title="1.继承的概念"></a>1.继承的概念</h3><p>父亲儿子，电影《西虹市首富》</p>
<h3 id="2-继承的关键字"><a href="#2-继承的关键字" class="headerlink" title="2.继承的关键字"></a>2.继承的关键字</h3><p>  extends</p>
<h3 id="3-继承的语法"><a href="#3-继承的语法" class="headerlink" title="3.继承的语法"></a>3.继承的语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class 类名  extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-使用，在之类中"><a href="#4-使用，在之类中" class="headerlink" title="4.使用，在之类中"></a>4.使用，在之类中</h3><p>可以直接调用父类的非私有属性和方法<br>可以用super.方法     super.属性</p>
<h3 id="5-父类构造方法调用：super"><a href="#5-父类构造方法调用：super" class="headerlink" title="5.父类构造方法调用：super();"></a>5.父类构造方法调用：super();</h3><p>调用父类的构造方法必须在之类中调用<br>必须实在之类构造方法的第一行代码</p>
<h3 id="6-重写"><a href="#6-重写" class="headerlink" title="6.重写"></a>6.重写</h3><p>必须继承<br>方法名一致，参数个数，顺序，类型全部一致</p>
<h2 id="第五章-面向对象—多态"><a href="#第五章-面向对象—多态" class="headerlink" title="第五章 面向对象—多态"></a>第五章 面向对象—多态</h2><hr>
<h3 id="1-多态的概念"><a href="#1-多态的概念" class="headerlink" title="1.多态的概念"></a>1.多态的概念</h3><h3 id="2-多态的必要条件"><a href="#2-多态的必要条件" class="headerlink" title="2.多态的必要条件"></a>2.多态的必要条件</h3><p>继承<br>重写<br>父类引用指向子类对象（向上转型）</p>
<h3 id="3-多态的使用"><a href="#3-多态的使用" class="headerlink" title="3.多态的使用"></a>3.多态的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Father&#123;</span><br><span class="line">  		public void cooking()&#123;</span><br><span class="line">  			System.out.println(&quot;米饭&quot;);</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">   	public class Son extends Father&#123;</span><br><span class="line">  			@Override</span><br><span class="line">  			public void cooking()&#123;</span><br><span class="line">  				System.out.println(&quot;熬粥&quot;);</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line">  		public class Test &#123;</span><br><span class="line"> 			public static void main(String[] args) &#123;</span><br><span class="line"> 				Father son=new Son();</span><br><span class="line"> 				son.cooking();</span><br><span class="line"> 			&#125;</span><br><span class="line"> 		&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-向下转型"><a href="#4-向下转型" class="headerlink" title="4.向下转型"></a>4.向下转型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Son son=(Son)father;</span><br></pre></td></tr></table></figure>



<h2 id="第六章-抽象"><a href="#第六章-抽象" class="headerlink" title="第六章 抽象"></a>第六章 抽象</h2><hr>
<h3 id="1-抽象的概念"><a href="#1-抽象的概念" class="headerlink" title="1.抽象的概念"></a>1.抽象的概念</h3><h3 id="2-抽象的关键字"><a href="#2-抽象的关键字" class="headerlink" title="2.抽象的关键字"></a>2.抽象的关键字</h3><p>abstract:可以修饰类，可以修饰方法</p>
<h3 id="3-抽象的用法"><a href="#3-抽象的用法" class="headerlink" title="3.抽象的用法"></a>3.抽象的用法</h3><p>//抽象类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class 类名&#123;</span><br><span class="line">	//抽象方法没有方法体</span><br><span class="line">	public abstract void 方法名();	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>//当父类是抽象类的时候，子类必须重写父类里面的抽象方法</p>
<h3 id="4-final修饰符：最终的"><a href="#4-final修饰符：最终的" class="headerlink" title="4.final修饰符：最终的"></a>4.final修饰符：最终的</h3><p>  修饰变量，修饰方法，修饰类<br>      1.当修饰变量时，变量转换成常量，常量的值不能改变<br>          final int a=18;//a=18;不能改变,必须给一个初始值<br>      2.当修饰方法时，该方法不能被重写<br>      3.当修饰类时，该类不能被继承</p>
<h2 id="第七章-接口"><a href="#第七章-接口" class="headerlink" title="第七章 接口"></a>第七章 接口</h2><hr>
<h3 id="1-接口的概念"><a href="#1-接口的概念" class="headerlink" title="1.接口的概念"></a>1.接口的概念</h3><h3 id="2-接口的关键字"><a href="#2-接口的关键字" class="headerlink" title="2.接口的关键字"></a>2.接口的关键字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface</span><br></pre></td></tr></table></figure>



<h3 id="3-接口的语法"><a href="#3-接口的语法" class="headerlink" title="3.接口的语法"></a>3.接口的语法</h3><p>public interface 接口名{}<br>File—&gt;new—&gt;interface//创建接口</p>
<h3 id="4-接口的用法"><a href="#4-接口的用法" class="headerlink" title="4.接口的用法"></a>4.接口的用法</h3><pre><code>实现接口的关键字  implements</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	public interface 接口名&#123;</span><br><span class="line">		//接口是纯抽象类</span><br><span class="line">		//接口里面的方法都是抽象方法</span><br><span class="line">		void setData();</span><br><span class="line">	&#125;</span><br><span class="line">	public class Play implements 接口名&#123;</span><br><span class="line">		@Override</span><br><span class="line">		void setData()&#123;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">	public class Test &#123;</span><br><span class="line">		public static void main(String[] args) &#123;</span><br><span class="line">			Play play=new Play();</span><br><span class="line">			play.setData();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>注意接口可以进行多继承<br>public interface 接口名 extends 接口名，接口名{}<br>一般用法<br>public class 类名 extends 父类 implements 接口，接口{}</p>
<h2 id="第八章-集合框架"><a href="#第八章-集合框架" class="headerlink" title="第八章 集合框架"></a>第八章 集合框架</h2><hr>
<h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h3><p>用法<br>      ArrayList list=new ArrayList();<br>      list.add();//添加数据<br>      list.get();//获取数据</p>
<h3 id="2-Map"><a href="#2-Map" class="headerlink" title="2.Map"></a>2.Map</h3><p> 用法<br>      Map map=new HasMap();<br>      map.put(key,value);//key不能重复<br>      map.get(key);//获取key对象的value</p>
<h3 id="3-泛型"><a href="#3-泛型" class="headerlink" title="3.泛型"></a>3.泛型</h3><p>用法</p>
<p>​      ArrayList<string> list=new ArrayList&gt;<string>();<br>      Map&lt;String,String&gt; map=new HasMap&lt;String,String&gt;();<br>      ArrayList&lt;Map&lt;String,String&gt;&gt; list=new ArrayList&gt;&lt;Map&lt;String,String&gt;&gt;();</string></string></p>
]]></content>
  </entry>
</search>
